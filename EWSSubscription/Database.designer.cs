#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleApplication1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database")]
	public partial class DatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBankSystem(BankSystem instance);
    partial void UpdateBankSystem(BankSystem instance);
    partial void DeleteBankSystem(BankSystem instance);
    partial void InsertWorkTable(WorkTable instance);
    partial void UpdateWorkTable(WorkTable instance);
    partial void DeleteWorkTable(WorkTable instance);
    partial void InsertSystemManager(SystemManager instance);
    partial void UpdateSystemManager(SystemManager instance);
    partial void DeleteSystemManager(SystemManager instance);
    partial void InsertBankMailbox(BankMailbox instance);
    partial void UpdateBankMailbox(BankMailbox instance);
    partial void DeleteBankMailbox(BankMailbox instance);
    partial void InsertBankNotification(BankNotification instance);
    partial void UpdateBankNotification(BankNotification instance);
    partial void DeleteBankNotification(BankNotification instance);
    #endregion
		
		public DatabaseDataContext() : 
				base(global::ConsoleApplication1.Properties.Settings.Default.DatabaseConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BankSystem> BankSystems
		{
			get
			{
				return this.GetTable<BankSystem>();
			}
		}
		
		public System.Data.Linq.Table<WorkTable> WorkTables
		{
			get
			{
				return this.GetTable<WorkTable>();
			}
		}
		
		public System.Data.Linq.Table<SystemManager> SystemManagers
		{
			get
			{
				return this.GetTable<SystemManager>();
			}
		}
		
		public System.Data.Linq.Table<BankMailbox> BankMailboxes
		{
			get
			{
				return this.GetTable<BankMailbox>();
			}
		}
		
		public System.Data.Linq.Table<BankNotification> BankNotifications
		{
			get
			{
				return this.GetTable<BankNotification>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BankSystems")]
	public partial class BankSystem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _systemID;
		
		private string _name;
		
		private string _userName;
		
		private string _description;
		
		private int _systemManagerId;
		
		private EntitySet<WorkTable> _WorkTables;
		
		private EntitySet<BankNotification> _BankNotifications;
		
		private EntityRef<SystemManager> _SystemManager;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsystemIDChanging(int value);
    partial void OnsystemIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnsystemManagerIdChanging(int value);
    partial void OnsystemManagerIdChanged();
    #endregion
		
		public BankSystem()
		{
			this._WorkTables = new EntitySet<WorkTable>(new Action<WorkTable>(this.attach_WorkTables), new Action<WorkTable>(this.detach_WorkTables));
			this._BankNotifications = new EntitySet<BankNotification>(new Action<BankNotification>(this.attach_BankNotifications), new Action<BankNotification>(this.detach_BankNotifications));
			this._SystemManager = default(EntityRef<SystemManager>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_systemID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int systemID
		{
			get
			{
				return this._systemID;
			}
			set
			{
				if ((this._systemID != value))
				{
					this.OnsystemIDChanging(value);
					this.SendPropertyChanging();
					this._systemID = value;
					this.SendPropertyChanged("systemID");
					this.OnsystemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(200)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_systemManagerId", DbType="Int NOT NULL")]
		public int systemManagerId
		{
			get
			{
				return this._systemManagerId;
			}
			set
			{
				if ((this._systemManagerId != value))
				{
					if (this._SystemManager.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsystemManagerIdChanging(value);
					this.SendPropertyChanging();
					this._systemManagerId = value;
					this.SendPropertyChanged("systemManagerId");
					this.OnsystemManagerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BankSystem_WorkTable", Storage="_WorkTables", ThisKey="systemID", OtherKey="systemId")]
		public EntitySet<WorkTable> WorkTables
		{
			get
			{
				return this._WorkTables;
			}
			set
			{
				this._WorkTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BankSystem_BankNotification", Storage="_BankNotifications", ThisKey="systemID", OtherKey="systemId")]
		public EntitySet<BankNotification> BankNotifications
		{
			get
			{
				return this._BankNotifications;
			}
			set
			{
				this._BankNotifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemManager_BankSystem", Storage="_SystemManager", ThisKey="systemManagerId", OtherKey="systemManagerId", IsForeignKey=true)]
		public SystemManager SystemManager
		{
			get
			{
				return this._SystemManager.Entity;
			}
			set
			{
				SystemManager previousValue = this._SystemManager.Entity;
				if (((previousValue != value) 
							|| (this._SystemManager.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemManager.Entity = null;
						previousValue.BankSystems.Remove(this);
					}
					this._SystemManager.Entity = value;
					if ((value != null))
					{
						value.BankSystems.Add(this);
						this._systemManagerId = value.systemManagerId;
					}
					else
					{
						this._systemManagerId = default(int);
					}
					this.SendPropertyChanged("SystemManager");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkTables(WorkTable entity)
		{
			this.SendPropertyChanging();
			entity.BankSystem = this;
		}
		
		private void detach_WorkTables(WorkTable entity)
		{
			this.SendPropertyChanging();
			entity.BankSystem = null;
		}
		
		private void attach_BankNotifications(BankNotification entity)
		{
			this.SendPropertyChanging();
			entity.BankSystem = this;
		}
		
		private void detach_BankNotifications(BankNotification entity)
		{
			this.SendPropertyChanging();
			entity.BankSystem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkTable")]
	public partial class WorkTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _mailAddress;
		
		private int _systemId;
		
		private bool _notifyOnNewMails;
		
		private bool _notifyOnNewAppointments;
		
		private EntityRef<BankSystem> _BankSystem;
		
		private EntityRef<BankMailbox> _BankMailbox;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmailAddressChanging(string value);
    partial void OnmailAddressChanged();
    partial void OnsystemIdChanging(int value);
    partial void OnsystemIdChanged();
    partial void OnnotifyOnNewMailsChanging(bool value);
    partial void OnnotifyOnNewMailsChanged();
    partial void OnnotifyOnNewAppointmentsChanging(bool value);
    partial void OnnotifyOnNewAppointmentsChanged();
    #endregion
		
		public WorkTable()
		{
			this._BankSystem = default(EntityRef<BankSystem>);
			this._BankMailbox = default(EntityRef<BankMailbox>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mailAddress", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string mailAddress
		{
			get
			{
				return this._mailAddress;
			}
			set
			{
				if ((this._mailAddress != value))
				{
					if (this._BankMailbox.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmailAddressChanging(value);
					this.SendPropertyChanging();
					this._mailAddress = value;
					this.SendPropertyChanged("mailAddress");
					this.OnmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_systemId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int systemId
		{
			get
			{
				return this._systemId;
			}
			set
			{
				if ((this._systemId != value))
				{
					if (this._BankSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsystemIdChanging(value);
					this.SendPropertyChanging();
					this._systemId = value;
					this.SendPropertyChanged("systemId");
					this.OnsystemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notifyOnNewMails", DbType="Bit NOT NULL")]
		public bool notifyOnNewMails
		{
			get
			{
				return this._notifyOnNewMails;
			}
			set
			{
				if ((this._notifyOnNewMails != value))
				{
					this.OnnotifyOnNewMailsChanging(value);
					this.SendPropertyChanging();
					this._notifyOnNewMails = value;
					this.SendPropertyChanged("notifyOnNewMails");
					this.OnnotifyOnNewMailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notifyOnNewAppointments", DbType="Bit NOT NULL")]
		public bool notifyOnNewAppointments
		{
			get
			{
				return this._notifyOnNewAppointments;
			}
			set
			{
				if ((this._notifyOnNewAppointments != value))
				{
					this.OnnotifyOnNewAppointmentsChanging(value);
					this.SendPropertyChanging();
					this._notifyOnNewAppointments = value;
					this.SendPropertyChanged("notifyOnNewAppointments");
					this.OnnotifyOnNewAppointmentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BankSystem_WorkTable", Storage="_BankSystem", ThisKey="systemId", OtherKey="systemID", IsForeignKey=true)]
		public BankSystem BankSystem
		{
			get
			{
				return this._BankSystem.Entity;
			}
			set
			{
				BankSystem previousValue = this._BankSystem.Entity;
				if (((previousValue != value) 
							|| (this._BankSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BankSystem.Entity = null;
						previousValue.WorkTables.Remove(this);
					}
					this._BankSystem.Entity = value;
					if ((value != null))
					{
						value.WorkTables.Add(this);
						this._systemId = value.systemID;
					}
					else
					{
						this._systemId = default(int);
					}
					this.SendPropertyChanged("BankSystem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BankMailbox_WorkTable", Storage="_BankMailbox", ThisKey="mailAddress", OtherKey="mailAddress", IsForeignKey=true)]
		public BankMailbox BankMailbox
		{
			get
			{
				return this._BankMailbox.Entity;
			}
			set
			{
				BankMailbox previousValue = this._BankMailbox.Entity;
				if (((previousValue != value) 
							|| (this._BankMailbox.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BankMailbox.Entity = null;
						previousValue.WorkTables.Remove(this);
					}
					this._BankMailbox.Entity = value;
					if ((value != null))
					{
						value.WorkTables.Add(this);
						this._mailAddress = value.mailAddress;
					}
					else
					{
						this._mailAddress = default(string);
					}
					this.SendPropertyChanged("BankMailbox");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SystemManagers")]
	public partial class SystemManager : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _systemManagerId;
		
		private string _name;
		
		private string _phone;
		
		private string _mail;
		
		private EntitySet<BankSystem> _BankSystems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsystemManagerIdChanging(int value);
    partial void OnsystemManagerIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnmailChanging(string value);
    partial void OnmailChanged();
    #endregion
		
		public SystemManager()
		{
			this._BankSystems = new EntitySet<BankSystem>(new Action<BankSystem>(this.attach_BankSystems), new Action<BankSystem>(this.detach_BankSystems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_systemManagerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int systemManagerId
		{
			get
			{
				return this._systemManagerId;
			}
			set
			{
				if ((this._systemManagerId != value))
				{
					this.OnsystemManagerIdChanging(value);
					this.SendPropertyChanging();
					this._systemManagerId = value;
					this.SendPropertyChanged("systemManagerId");
					this.OnsystemManagerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="NVarChar(12)")]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mail", DbType="NVarChar(50)")]
		public string mail
		{
			get
			{
				return this._mail;
			}
			set
			{
				if ((this._mail != value))
				{
					this.OnmailChanging(value);
					this.SendPropertyChanging();
					this._mail = value;
					this.SendPropertyChanged("mail");
					this.OnmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemManager_BankSystem", Storage="_BankSystems", ThisKey="systemManagerId", OtherKey="systemManagerId")]
		public EntitySet<BankSystem> BankSystems
		{
			get
			{
				return this._BankSystems;
			}
			set
			{
				this._BankSystems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BankSystems(BankSystem entity)
		{
			this.SendPropertyChanging();
			entity.SystemManager = this;
		}
		
		private void detach_BankSystems(BankSystem entity)
		{
			this.SendPropertyChanging();
			entity.SystemManager = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BankMailboxes")]
	public partial class BankMailbox : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _mailAddress;
		
		private string _userName;
		
		private string _groupingInformation;
		
		private bool _notifyOnNewMails;
		
		private bool _notifyOnNewAppointments;
		
		private string _ewsUrl;
		
		private string _calendarSyncStatus;
		
		private string _inboxSyncStatus;
		
		private string _managingServer;
		
		private EntitySet<WorkTable> _WorkTables;
		
		private EntitySet<BankNotification> _BankNotifications;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmailAddressChanging(string value);
    partial void OnmailAddressChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OngroupingInformationChanging(string value);
    partial void OngroupingInformationChanged();
    partial void OnnotifyOnNewMailsChanging(bool value);
    partial void OnnotifyOnNewMailsChanged();
    partial void OnnotifyOnNewAppointmentsChanging(bool value);
    partial void OnnotifyOnNewAppointmentsChanged();
    partial void OnewsUrlChanging(string value);
    partial void OnewsUrlChanged();
    partial void OncalendarSyncStatusChanging(string value);
    partial void OncalendarSyncStatusChanged();
    partial void OninboxSyncStatusChanging(string value);
    partial void OninboxSyncStatusChanged();
    partial void OnmanagingServerChanging(string value);
    partial void OnmanagingServerChanged();
    #endregion
		
		public BankMailbox()
		{
			this._WorkTables = new EntitySet<WorkTable>(new Action<WorkTable>(this.attach_WorkTables), new Action<WorkTable>(this.detach_WorkTables));
			this._BankNotifications = new EntitySet<BankNotification>(new Action<BankNotification>(this.attach_BankNotifications), new Action<BankNotification>(this.detach_BankNotifications));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mailAddress", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string mailAddress
		{
			get
			{
				return this._mailAddress;
			}
			set
			{
				if ((this._mailAddress != value))
				{
					this.OnmailAddressChanging(value);
					this.SendPropertyChanging();
					this._mailAddress = value;
					this.SendPropertyChanged("mailAddress");
					this.OnmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_groupingInformation", DbType="NVarChar(MAX)")]
		public string groupingInformation
		{
			get
			{
				return this._groupingInformation;
			}
			set
			{
				if ((this._groupingInformation != value))
				{
					this.OngroupingInformationChanging(value);
					this.SendPropertyChanging();
					this._groupingInformation = value;
					this.SendPropertyChanged("groupingInformation");
					this.OngroupingInformationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notifyOnNewMails", DbType="Bit NOT NULL")]
		public bool notifyOnNewMails
		{
			get
			{
				return this._notifyOnNewMails;
			}
			set
			{
				if ((this._notifyOnNewMails != value))
				{
					this.OnnotifyOnNewMailsChanging(value);
					this.SendPropertyChanging();
					this._notifyOnNewMails = value;
					this.SendPropertyChanged("notifyOnNewMails");
					this.OnnotifyOnNewMailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notifyOnNewAppointments", DbType="Bit NOT NULL")]
		public bool notifyOnNewAppointments
		{
			get
			{
				return this._notifyOnNewAppointments;
			}
			set
			{
				if ((this._notifyOnNewAppointments != value))
				{
					this.OnnotifyOnNewAppointmentsChanging(value);
					this.SendPropertyChanging();
					this._notifyOnNewAppointments = value;
					this.SendPropertyChanged("notifyOnNewAppointments");
					this.OnnotifyOnNewAppointmentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ewsUrl", DbType="NVarChar(MAX)")]
		public string ewsUrl
		{
			get
			{
				return this._ewsUrl;
			}
			set
			{
				if ((this._ewsUrl != value))
				{
					this.OnewsUrlChanging(value);
					this.SendPropertyChanging();
					this._ewsUrl = value;
					this.SendPropertyChanged("ewsUrl");
					this.OnewsUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_calendarSyncStatus", DbType="NVarChar(MAX)")]
		public string calendarSyncStatus
		{
			get
			{
				return this._calendarSyncStatus;
			}
			set
			{
				if ((this._calendarSyncStatus != value))
				{
					this.OncalendarSyncStatusChanging(value);
					this.SendPropertyChanging();
					this._calendarSyncStatus = value;
					this.SendPropertyChanged("calendarSyncStatus");
					this.OncalendarSyncStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inboxSyncStatus", DbType="NVarChar(MAX)")]
		public string inboxSyncStatus
		{
			get
			{
				return this._inboxSyncStatus;
			}
			set
			{
				if ((this._inboxSyncStatus != value))
				{
					this.OninboxSyncStatusChanging(value);
					this.SendPropertyChanging();
					this._inboxSyncStatus = value;
					this.SendPropertyChanged("inboxSyncStatus");
					this.OninboxSyncStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_managingServer", DbType="NVarChar(100)")]
		public string managingServer
		{
			get
			{
				return this._managingServer;
			}
			set
			{
				if ((this._managingServer != value))
				{
					this.OnmanagingServerChanging(value);
					this.SendPropertyChanging();
					this._managingServer = value;
					this.SendPropertyChanged("managingServer");
					this.OnmanagingServerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BankMailbox_WorkTable", Storage="_WorkTables", ThisKey="mailAddress", OtherKey="mailAddress")]
		public EntitySet<WorkTable> WorkTables
		{
			get
			{
				return this._WorkTables;
			}
			set
			{
				this._WorkTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BankMailbox_BankNotification", Storage="_BankNotifications", ThisKey="mailAddress", OtherKey="mailAddress")]
		public EntitySet<BankNotification> BankNotifications
		{
			get
			{
				return this._BankNotifications;
			}
			set
			{
				this._BankNotifications.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkTables(WorkTable entity)
		{
			this.SendPropertyChanging();
			entity.BankMailbox = this;
		}
		
		private void detach_WorkTables(WorkTable entity)
		{
			this.SendPropertyChanging();
			entity.BankMailbox = null;
		}
		
		private void attach_BankNotifications(BankNotification entity)
		{
			this.SendPropertyChanging();
			entity.BankMailbox = this;
		}
		
		private void detach_BankNotifications(BankNotification entity)
		{
			this.SendPropertyChanging();
			entity.BankMailbox = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BankNotifications")]
	public partial class BankNotification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _itemId;
		
		private int _systemId;
		
		private string _mailAddress;
		
		private EntityRef<BankMailbox> _BankMailbox;
		
		private EntityRef<BankSystem> _BankSystem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnitemIdChanging(int value);
    partial void OnitemIdChanged();
    partial void OnsystemIdChanging(int value);
    partial void OnsystemIdChanged();
    partial void OnmailAddressChanging(string value);
    partial void OnmailAddressChanged();
    #endregion
		
		public BankNotification()
		{
			this._BankMailbox = default(EntityRef<BankMailbox>);
			this._BankSystem = default(EntityRef<BankSystem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int itemId
		{
			get
			{
				return this._itemId;
			}
			set
			{
				if ((this._itemId != value))
				{
					this.OnitemIdChanging(value);
					this.SendPropertyChanging();
					this._itemId = value;
					this.SendPropertyChanged("itemId");
					this.OnitemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_systemId", DbType="Int NOT NULL")]
		public int systemId
		{
			get
			{
				return this._systemId;
			}
			set
			{
				if ((this._systemId != value))
				{
					if (this._BankSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsystemIdChanging(value);
					this.SendPropertyChanging();
					this._systemId = value;
					this.SendPropertyChanged("systemId");
					this.OnsystemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mailAddress", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string mailAddress
		{
			get
			{
				return this._mailAddress;
			}
			set
			{
				if ((this._mailAddress != value))
				{
					if (this._BankMailbox.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmailAddressChanging(value);
					this.SendPropertyChanging();
					this._mailAddress = value;
					this.SendPropertyChanged("mailAddress");
					this.OnmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BankMailbox_BankNotification", Storage="_BankMailbox", ThisKey="mailAddress", OtherKey="mailAddress", IsForeignKey=true)]
		public BankMailbox BankMailbox
		{
			get
			{
				return this._BankMailbox.Entity;
			}
			set
			{
				BankMailbox previousValue = this._BankMailbox.Entity;
				if (((previousValue != value) 
							|| (this._BankMailbox.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BankMailbox.Entity = null;
						previousValue.BankNotifications.Remove(this);
					}
					this._BankMailbox.Entity = value;
					if ((value != null))
					{
						value.BankNotifications.Add(this);
						this._mailAddress = value.mailAddress;
					}
					else
					{
						this._mailAddress = default(string);
					}
					this.SendPropertyChanged("BankMailbox");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BankSystem_BankNotification", Storage="_BankSystem", ThisKey="systemId", OtherKey="systemID", IsForeignKey=true)]
		public BankSystem BankSystem
		{
			get
			{
				return this._BankSystem.Entity;
			}
			set
			{
				BankSystem previousValue = this._BankSystem.Entity;
				if (((previousValue != value) 
							|| (this._BankSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BankSystem.Entity = null;
						previousValue.BankNotifications.Remove(this);
					}
					this._BankSystem.Entity = value;
					if ((value != null))
					{
						value.BankNotifications.Add(this);
						this._systemId = value.systemID;
					}
					else
					{
						this._systemId = default(int);
					}
					this.SendPropertyChanged("BankSystem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
