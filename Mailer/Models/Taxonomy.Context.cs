//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mailer.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Taxonomy : DbContext
    {
        public Taxonomy()
            : base("name=Taxonomy1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        [DbFunction("Taxonomy1", "GetUsersEx")]
        public virtual IQueryable<BankUser> GetUsersEx(string hierarchyIDs, string itemNames)
        {
            var hierarchyIDsParameter = hierarchyIDs != null ?
                new ObjectParameter("hierarchyIDs", hierarchyIDs) :
                new ObjectParameter("hierarchyIDs", typeof(string));
    
            var itemNamesParameter = itemNames != null ?
                new ObjectParameter("itemNames", itemNames) :
                new ObjectParameter("itemNames", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<BankUser>("[Taxonomy1].[GetUsersEx](@hierarchyIDs, @itemNames)", hierarchyIDsParameter, itemNamesParameter);
        }
    
        public virtual ObjectResult<BankUnit> GetBranches(string text, Nullable<int> take)
        {
            var textParameter = text != null ?
                new ObjectParameter("text", text) :
                new ObjectParameter("text", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BankUnit>("GetBranches", textParameter, takeParameter);
        }
    
        public virtual ObjectResult<ExtendedRecipient> GetRecipients(string text1, string text2, Nullable<int> take)
        {
            var text1Parameter = text1 != null ?
                new ObjectParameter("text1", text1) :
                new ObjectParameter("text1", typeof(string));
    
            var text2Parameter = text2 != null ?
                new ObjectParameter("text2", text2) :
                new ObjectParameter("text2", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExtendedRecipient>("GetRecipients", text1Parameter, text2Parameter, takeParameter);
        }
    
        public virtual ObjectResult<BankUser> GetUsersOrGroups(string text, Nullable<int> take, Nullable<int> options)
        {
            var textParameter = text != null ?
                new ObjectParameter("text", text) :
                new ObjectParameter("text", typeof(string));
    
            var takeParameter = take.HasValue ?
                new ObjectParameter("take", take) :
                new ObjectParameter("take", typeof(int));
    
            var optionsParameter = options.HasValue ?
                new ObjectParameter("options", options) :
                new ObjectParameter("options", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BankUser>("GetUsersOrGroups", textParameter, takeParameter, optionsParameter);
        }
    }
}
